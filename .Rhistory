knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(SummarizedExperiment)
library(knitr)
library(metabolomicsWorkbenchR)
library(ellipse)
library(stats)
dades <- read.table("ST000002_AN000002.txt", header=TRUE, sep="\t", row.names=1, nrows=143, skip=71)
factors <- dades[1,]
metabolites <- rownames(dades)[-1]
samples <- colnames(dades)
n <- length(samples)
sampleNames <- vector("character", n)
factorLabels <- vector("character", n)
for (i in 1:n) {
if (grepl("After", factors[i])) {
sampleNames[i] <- gsub(pattern="LabF", replacement="A", x=samples[i])
factorLabels[i] <- c("After")
}
if (grepl("Before", factors[i])) {
sampleNames[i] <- gsub(pattern="LabF", replacement="B", x=samples[i])
factorLabels[i] <- c("Before")
}
}
colnames(dades) <- sampleNames
factorLabels <- sapply(factorLabels, function(x) as.factor(x))
dades[1,] <- factorLabels
write.table(dades, file="dades.txt", sep="\t", row.names=FALSE)
exprs <- dades[-1,] %>% sapply(function(x) as.numeric(as.character(x)))
colnames(exprs) <- sampleNames
rownames(exprs) <- metabolites
colData <- data.frame(sampleNames, factorLabels)
rowData <- read.table("ST000002_AN000002.txt", header=TRUE, sep="\t", nrows=142, skip=218)
stopifnot(rownames(exprs) == rowData$metabolite_name)
stopifnot(colnames(exprs) == colData$sampleNames)
se <- SummarizedExperiment(assay=list("exprs"=exprs),
colData=colData,
rowData=rowData)
save(se, file="SummarizedExperiment.Rda")
metadades <- file("metadades.md", "w")
writeLines("# Metadades ST000002_AN000002\n\n", metadades)
writeLines("## Informació sobre les mostres\n\n", metadades)
writeLines(as.character(kable(colData, format = "markdown")), metadades)
writeLines("\n\n", metadades)
writeLines("## Informació sobre els metabolits\n\n", metadades)
writeLines(as.character(kable(rowData, format = "markdown")), metadades)
close(metadades)
se1 <- do_query(context="study",
input_item="study_id",
input_value="ST000002",
output_item="SummarizedExperiment")
dim(assay(se))
anyNA(assay(se))
summary(assay(se))
summary(t(assay(se)))[,1:4]
boxplot(t(assay(se)[1:4,]), cex.axis=0.6, main="Diagrames de caixa d'alguns metabolits")
SumNorm <- function(x) {
1000*x/sum(x)
}
ParetoNorm <- function(x) {
(x - mean(x))/sqrt(sd(x))
}
X <- assay(se)
X_centrat <- apply(X, MARGIN=2, SumNorm)
X_norm <- t(apply(X_centrat, MARGIN=1, ParetoNorm))
boxplot(X_norm, cex.axis=0.4, main="Diagrames de caixa de les mostres amb les dades normalitzades")
boxplot(t(X_norm[1:71,]), cex.axis=0.4, las=2, main="Diagrames de caixa dels metabolits amb les dades normalitzades")
boxplot(t(X_norm[72:142,]), cex.axis=0.4, las=2, main="Diagrames de caixa dels metabolits amb les dades normalitzades")
pcX <- prcomp(t(X_norm))
loads <- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab <- c(paste0("PC 1 (", loads[1],"%)", sep=""))
ylab <- c(paste0("PC 2 (", loads[2],"%)", sep=""))
colorGrups <- c(rep("red3",6), rep("green4",6))
plot(pcX$x[,1:2], xlab=xlab, ylab=ylab, col=colorGrups, main="Anàlisi de components principals (PCA)", xlim=c(-50,60), ylim=c(-50,30), pch=1)
for (i in unique(colorGrups)) {
coordGrup <- pcX$x[colorGrups == i, 1:2]
matriuCov <- cov(coordGrup)
centre <- colMeans(coordGrup)
elipse <- ellipse(matriuCov, centre=centre, level=0.95)
polygon(elipse, col=adjustcolor(i, alpha=0.2), border=i)
}
text(pcX$x[,1],pcX$x[,2],colnames(X_norm), pos=4, cex=0.4)
dist <- dist(t(X_norm), method="euclidean")
hc <- hclust(dist, method="ward.D2")
plot(as.dendrogram(hc), main="Dendrograma d'agrupament jeràrquic aglomeratiu de les mostres")
ttest <- function(x) {
tt <- t.test(x[1:6],x[7:12],var.equal=TRUE)
return(c(tt$statistic,
tt$p.value,
tt$estimate[2]/tt$estimate[1]))
}
T.test <- apply(X, MARGIN=1, ttest)
T.statistic <- T.test[1,]
T.pvalue <- T.test[2,]
T.logpV <- -log10(T.pvalue)
T.fc <- T.test[3,]
T.logFc <- log2(T.fc)
resultatTtests <- data.frame(t.stat=T.statistic,
pvalue=T.pvalue,
logp=T.logpV,
FC=T.fc,
log2FC=T.logFc)
hist(T.statistic, main="Distribució dels valors t", xlab="Estadístic t", ylab="Freqüència")
plot(c(1:142), T.logpV, xlab="", ylab="-log10(valor p)", main="Proves t", ylim=c(0,2.5))
abline(h=-log10(0.05), lty=2)
for (i in c(0.05, 0.01, 0.001)) {
print(paste("metabolits amb p valor menor que ", i, ": ", length(which(T.pvalue < i)), sep=""))
}
metabol5 <- rownames(X)[which(resultatTtests$pvalue < 0.05)]
metabol1 <- rownames(X)[which(resultatTtests$pvalue < 0.01)]
if (length(metabol1) < length(metabol5)) {
metabol1 <- c(metabol1, rep("-", length(metabol5) - length(metabol1)))
}
taula <- data.frame(
ns5 = metabol5,
ns1 = metabol1
)
colnames(taula) <- c("Nivell de significació 0.05", "Nivell de significació 0.01")
kable(taula)
n <- nrow(X)
colors <- vector("character", n)
for (i in 1:n) {
if (T.logpV[i] < -log10(0.05)) {
colors[i] <- "grey"
}
else if (T.logpV[i] > -log10(0.05) && T.logFc[i] < -log2(2)) {
colors[i] <- "blue"
}
else if (T.logpV[i] > -log10(0.05) && T.logFc[i] > -log2(2)) {
colors[i] <- "red"
}
}
plot(T.logFc, T.logpV, col=colors, main="Volcano plot", xlab="log2(Fold Change)", ylab="-log10(p valor)", xlim=c(-5,7.5), ylim=c(0,3))
abline(h=-log10(0.05), lty=2)
abline(v=c(-log2(2),log2(2)), lty=2)
for (i in 1:n) {
if (T.logpV[i] > 1.5) {
text(T.logFc[i], T.logpV[i], labels = rownames(X)[i], pos = 3, cex = 0.7)
}
}
